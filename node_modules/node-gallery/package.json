{
  "_from": "node-gallery@^1.1.0",
  "_id": "node-gallery@1.1.0",
  "_inBundle": false,
  "_integrity": "sha1-QC1GgMgX/X8MWFErUfGQrjDBZFc=",
  "_location": "/node-gallery",
  "_phantomChildren": {
    "content-disposition": "0.5.0",
    "crc": "3.2.1",
    "depd": "1.0.1",
    "destroy": "1.0.3",
    "media-typer": "0.3.0",
    "parseurl": "1.3.1",
    "proxy-addr": "1.0.10",
    "range-parser": "1.0.3",
    "utils-merge": "1.0.0",
    "vary": "1.0.1"
  },
  "_requested": {
    "escapedName": "node-gallery",
    "fetchSpec": "^1.1.0",
    "name": "node-gallery",
    "raw": "node-gallery@^1.1.0",
    "rawSpec": "^1.1.0",
    "registry": true,
    "saveSpec": null,
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-gallery/-/node-gallery-1.1.0.tgz",
  "_shasum": "402d4680c817fd7f0c58512b51f190ae30c16457",
  "_spec": "node-gallery@^1.1.0",
  "_where": "/home/srikaewa/NodeJSProjects/EucalyptusDiseaseDiagnosisServer",
  "author": {
    "email": "cian@cianclarke.com",
    "name": "Cian Clarke",
    "url": "http://www.cianclarke.com"
  },
  "bundleDependencies": false,
  "dependencies": {
    "ejs": "2.0.8",
    "exif": "git://github.com/cianclarke/node-exif.git",
    "express": "4.10.7",
    "gm": "^1.17.0",
    "imagemagick-stream": "^1.1.0",
    "memory-cache": "^0.1.1",
    "underscore": "^1.7.0"
  },
  "deprecated": false,
  "description": "NodeJS Photo Gallery using directory structure & exif info to output a gallery",
  "devDependencies": {
    "colors": "1.0.3"
  },
  "engines": {
    "node": ">=0.6.2"
  },
  "homepage": "http://www.github.com/cianclarke/node-gallery",
  "license": "MIT",
  "main": "lib/gallery.js",
  "name": "node-gallery",
  "optionalDependencies": {},
  "readme": "Node Gallery\n============\n\nNodeJS Photo Gallery built on Express 4.  \nFeed it a directory of photos, get back a JSON object & a styled photo gallery ready for the web.  \n\n* No database needed\n* Strictly no frills\n* Folders titles => Album titles\n* Image titles => Photo Titles\n* EXIF title => Description\n* Displays camera capture info (exposure, aperture, ISO..)\n\nInstallation\n============\n\n    $ npm install --save node-gallery\n    \nUsage    \n=====\nNode gallery can be used standalone, or in an existing node.js application. The example code has support for the Openshift and Heroku PaaS. \n\n## In Existing Applications\nNode Gallery exposes express style middleware, meaning it can be mounted to any route within your application.\n\n    /*\n    @param {string, required} staticFiles The directory where your album starts - can contain photos or images\n    @param {string, required} urlRoot The root URL which you pass into the epxress router in app.use (no way of obtaining this otherwise)\n    @param {string, optional} title Yup, you guessed it - the title to display on the root gallery\n    @param {boolean, optional} render Default to true. If explicitly set to false, rendering is left to the next function in the chain - see below. \n    @param {string, optional} thumbnail.width Thumbnail image width, defaults '200'\n    @param {string, optional} thumbnail.height as above\n    @param {string, optional} image.width Large images width defaults '100%'\n    @param {string, optional} image.height as above\n    */\n    app.use('/gallery', require('node-gallery')({\n      staticFiles : 'resources/photos',\n      urlRoot : 'gallery', \n      title : 'Example Gallery'\n    }));\n\nNow, you can access the gallery by going to your application's url /gallery - in the case of our example, http://localhost:3000/gallery. \n\n### Providing Views\nThe middleware renders the views in the `views` directory by default, but you can override this behavior & provide your own view rendering by setting `render` to false.  \nWhen this happens, the gallery HTML is returned in `req.html`, the raw JSON data in `req.data`. \n\n    app.use('/gallery', require('node-gallery')({\n      staticFiles : 'resources/photos',\n      urlRoot : 'gallery', \n      title : 'Example Gallery',\n      render : false\n    }), function(req, res, next){\n      /*\n       We MUST add another middleware function to the chain when render is false. \n       just return the raw HTML data - we could partial into another template here,\n       pass the JSON data into a template\n       */\n      return res.send(req.html);\n    });\n\n\nFor a more detailed example, see [examples/app.js](examples/app.js).\n\n\n### Middleware Routes\nThere are three main routes exposed under whatever root directory you provide.  \n  \nTo receive **JSON Responses** rather than a rendered HTML page, just send an `accept: application/json` header. \n\n**Album Pages**  \n\n    /:albumName/      \n    /:albumName/:subalbum  \n    /:albumName/:subalbum/:anothersubalbum  \n\n\n**Photo Pages**  \n    \n    /:albumName/photo/:photoName\n    /:albumName/:subalbum/photo/:photoName\n    \n**Image Files**  \n    \n    /:albumName/:subAlbum/:photoname.(png|jpg|tif|jpeg|gif)\n    \n## Running Standalone\nNode Gallery can be run standalone for testing.\nModify [examples/app.js](examples/app.js) to your liking, then add your albums & images to `examples/resources/photos` & run using:\n    \n\tcd example\n\tnpm install -d \n\tnode app.js\n\t\n\nExamples\n===================\nNode Gallery with out-of-the-box configuration is deployed to Heroku - [see it here.](http://nodegallery.herokuapp.com/gallery)  \n\nA basic usage example showing how to use node-gallery with Express can be found in [examples/basic.js](examples/basic.js).  \n  \nA more advanced example, showing how to take control of the rendering of your pages is shown in [examples/app.js](examples/app.js).  \n  \nTo try these examples:\n    \n    cd examples\n    npm install -d\n    node app.js # or node basic.js\n    \n\nPhotos\n===================\nPhotos are added to your specified `staticFiles` directory. Albums are created for every folder we encounter, and thumbnails are automatically generated by using the first image we come across in this album.  \n\nTests\n============\nTests are written in raw javascript. To run,\n\n    $ npm test\n\nImageMagick\n===========\nNode Gallery does require ImageMagick. Installation instructions for mac can be found at: http://www.imagemagick.org/script/binary-releases.php#macosx  \n  \nFor windows:\n\n1. Select imagemagick installer for your system, e.g., http://sourceforge.net/projects/imagemagick/files/6.8.9-exes/ImageMagick-6.8.9-4-Q16-x64-dll.exe/download\n2. Install imagemagick\n3. Make sure that imagemagick tools are available on system path (e.g., you can test if you can run \"convert.exe\" from CMD)\n4. Restart cygwin, CMD or whatever you use to fire up node.js\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": ""
  },
  "scripts": {
    "test": "node test/test-gallery.js ; node test/test-album.js ; node test/test-photo.js"
  },
  "subdomain": "node-gallery",
  "version": "1.1.0"
}
